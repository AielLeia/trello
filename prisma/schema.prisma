generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model Board {
  id            String @id @default(uuid())
  orgId         String
  title         String
  imageId       String
  imageThumbUrl String @db.Text
  imageFullUrl  String @db.Text
  imageUsername String @db.Text
  imageLinkHTML String @db.Text

  lists List[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model List {
  id    String @id @default(uuid())
  title String
  order Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  boardId String
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)

  card Card[]

  @@index([boardId])
}

model Card {
  id          String  @id @default(uuid())
  title       String
  order       Int
  description String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  listId String
  list   List   @relation(fields: [listId], references: [id], onDelete: Cascade)

  @@index([listId])
}

enum Action {
  Create
  Update
  Delete
}

enum EntityType {
  Board
  List
  Card
}

model AuditLog {
  id          String     @id @default(uuid())
  orgId       String
  action      Action
  entityId    String
  entityTitle String
  entityType  EntityType
  userId      String
  userImage   String     @db.Text
  username    String     @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrgLimit {
  id    String @id @default(uuid())
  orgId String @unique
  count Int    @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrgSubscription {
  id                     String    @id @default(uuid())
  orgId                  String    @unique
  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}
